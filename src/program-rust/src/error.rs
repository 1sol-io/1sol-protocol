//! Error types

use num_derive::FromPrimitive;
use solana_program::{decode_error::DecodeError, program_error::ProgramError};
use thiserror::Error;

/// Errors that may be returned by the OneSol program.
#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum OneSolError {
    /// Unknown error.
    #[error("Unknown error")]
    Unknown,

    /// Invalid instruction number passed in.
    #[error("Invalid instruction")]
    InvalidInstruction,

    /// The program address provided doesn't match the value generated by the program.
    #[error("Invalid program address generated from nonce and key")]
    InvalidProgramAddress,

    /// The deserialization of the account returned something besides State::Account.
    #[error("Deserialized account is not an SPL Token account")]
    ExpectedAccount,

    /// The provided token program does not match the token program expected by the swap
    #[error("The provided token program does not match the token program expected by the swap")]
    IncorrectTokenProgramId,

    /// ConversionFailure
    #[error("Conversion to u64 failed with an overflow or underflow")]
    ConversionFailure,
    
    /// Given pool token amount results in zero trading tokens
    #[error("Given pool token amount results in zero trading tokens")]
    ZeroTradingTokens,

}
impl From<OneSolError> for ProgramError {
    fn from(e: OneSolError) -> Self {
        ProgramError::Custom(e as u32)
    }
}
impl<T> DecodeError<T> for OneSolError {
    fn type_of() -> &'static str {
        "OneSolError"
    }
}
